#include <iostream>
#include <string>
#include <vector>
using namespace std;

//暴力求解最长子串
int lsubString_force_std(string s){
	int max = 0;
	for (int i = 0; i < s.size(); i++){
		int j = i + 1;
		int count = 1;
		while (j < s.size()){
			int z = j - 1;
			while (z >=i&&s[j]!=s[z]) z--;
			if (z + 1 == i) count++;
			j++;
		}
		if (max < count) max = count;
	}
	cout << max << endl;
	return max;
}

//暴力算法求解最长连续子串，注意&&运算符的短路性
int lsubString_force_substantial_std(string s){
	int max = 0;
	for (int i = 0; i < s.size(); i++){
		int j = i + 1;
		int count = 1;
		while (j < s.size()){
			int z = j - 1;
			while (z >= i&&s[j] != s[z]) z--;
			if (z + 1 != i) break;
			else count++;
			j++;
		}
		if (max < count) max = count;
	}
	cout << max << endl;
	return max;
}

//非暴力算法求解最长连续子串
int lsubString_intel_substantial_std(string s){
	int last[256];
	memset(last, -1, sizeof(int) * 256);
	int idx = -1;
	int max = 0;
	for (int i = 0; i < s.length(); i++){
		if (last[s[i]] > idx){
			idx = last[s[i]];
		}
		if (i - idx > max){
			max = i - idx;
		}
		last[s[i]] = i;
	}
	cout << max << endl;
	return max;
}


int main(){
	string s = "abcdaeheff";
	lsubString_force_substantial_std(s);
	lsubString_force_std(s);
	lsubString_intel_substantial_std(s);
	return 0;
}
