#include <iostream>
#include <string>
#include <stack>
using namespace std;

//ERROR_simple
int reverse(int x){
	int p[1000];
	memset(p, -1, sizeof(int)*1000);
	int i = 0;
	bool flag = false;
	if (x*-1 > 0) {
		x *= -1;
		flag = true;
	}
	while (x){
		p[i++] = x % 10;
		x /= 10;
	}
	int ret = 0;
	int count = 0;
	for (int i = sizeof(p) / sizeof(p[0]) - 1; i >= 0; i--){
		if (p[i] != -1) ret += p[i] * pow(10, count++);
	}
	if (flag == true) ret *= -1;
	return ret;
}
//ERROR_stack
int reverse_stack(int x){
	stack<int> sta;
	bool flag = false;
	int i = 0;
	if (x*-1 > 0){
		x *= -1;
		flag = true;
	}
	while (x){
		sta.push(x % 10);
		x /= 10;
	}
	int sum = 0, count = 0;
	while (!sta.empty()){
		sum += sta.top()*pow(10, count++);
		sta.pop();
	}
	if (flag == true) sum *= -1;
	cout << sum << endl;
	return sum;
}

int reverse_std(int x){
	long k = x;
	bool flag = false;
	if (k < 0){
		k = -k;
		flag = true;
	}
	long result = 0;
	while (k != 0){
		result *= 10;
		result += k % 10;
		k /= 10;
	}
	if (result > 2147483648 || result < -2147483647) return 0;
	else return flag == true ? int(-result) : result;
}
int main(){
	int x = 1534236469;
	int y=reverse_std(x);
	cout << y << endl;
	return 0;
}
