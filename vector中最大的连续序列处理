//1
class Solution {
public:
    int longestConsecutive(vector<int> &num) {
        if(num.size()==0) return 0;
        else if(num.size()==1) return 1;
        sort(num.begin(),num.end());
        int count=1;
        int max=-1;
        for(int i=1;i<num.size();i++){
            while(i<num.size()&&(num[i]-num[i-1]==1||num[i]-num[i-1]==0)){
                if(num[i]-num[i-1]==1){
                    count++;
                }
                i++;
            }
            if(count>max) max=count;
            count=1;
        }
        return max;
    }
};
//2
class Solution {
public:
    int longestConsecutive(vector<int> &num) {
        int max=1;
        sort(num.begin(),num.end());
        vector<int>::iterator iter=num.begin();
        int bl=1;
        while(iter!=num.end()-1){
            if((*iter)+1==*(iter+1)){
                bl+=1;
            }else if((*iter)==*(iter+1)){
                iter++;
                continue;
            }else{
                bl=1;
            }
            if (bl>max) max=bl;
            iter++;
        }
        return max;
    }
};
