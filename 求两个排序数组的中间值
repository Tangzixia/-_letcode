#include <iostream>
#include <string>
#include <vector>
#include <set>
using namespace std;

double findMedia(vector<int> vec1, vector<int> vec2){
	int len1 = vec1.size();
	int len2 = vec2.size();
	int len = (len1 + len2) / 2 + 1;
	
	vector<int> vec;
	int size = 0, i = 0, j = 0;
	if (len1 == 0 && len2 == 0) return 0.0;
	while (size < len){
		if (i == len1&&j < len2){
			vec.push_back(vec2[j]);
			j++;
		}
		else if (i < len1&&j == len2){
			vec.push_back(vec1[i]);
			i++;
		}
		else if (i < len1&&j < len2){
			if (vec1[i] < vec2[j]){
				vec.push_back(vec1[i]);
				i++;
			}
			else{
				vec.push_back(vec2[j]);
				j++;
			}
		}
		size = vec.size();
	}
	
	if ((len1 + len2) % 2 == 1) return vec[len-1];
	else return (vec[len-2] + vec[len - 1]) / 2;
}
double findMedia_set(int A[],int m,int B[],int n){
	int mid = (m + n + 1 ) / 2 - 1, median1 = 0, median2 = 0;
	multiset<int> s;
	int i = 0, j = 0, rValue = 0;
	while (i < m){
		s.insert(A[i]);
		i++;
	}
	while (j < n){
		s.insert(B[j]);
		j++;
	}
	i = 0;
	set<int>::iterator iter = s.begin();
	for (; i++ < mid&&iter != s.end(); iter++);
	median1 = *iter++;
	median2 = *iter;
	if ((m + n) % 2 == 1) return median1;
	else return (median1 + median2) / 2.0;
}
int main(){
	vector<int> vec1;
	vector<int> vec2;
	int arr[] = { 1, 2, 3, 4, 5, 8 };
	int arr2[] = { 7, 7, 8, 9, 10, 11 };

	for (int i = 0; i < sizeof(arr) / sizeof(arr[0]); i++){
		vec1.push_back(arr[i]);
	}
	for (int j = 0; j < sizeof(arr2) / sizeof(arr2[0]); j++){
		vec2.push_back(arr2[j]);
	}
	cout << findMedia(vec1, vec2) << endl;
	cout << findMedia_set(arr, 6, arr2, 6) << endl;
	return 0;
}
