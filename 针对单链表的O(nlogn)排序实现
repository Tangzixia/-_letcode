//针对单链表进行时间复杂度为o(nlogn)，空间复杂度为o(1)的排序，可选为贵宾改需和快速排序，现在选用归并排序
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *sortList(ListNode *head) {
        if(!head||!head->next){
            return head;
        }else{
            ListNode *slow=head,*fast=head->next;
            //注意，亲爱的亲，这是快慢指针的设置条件，先归再并哈，一定是fast->next和fast->next->next
            while(fast->next!=NULL&&fast->next->next!=NULL){
                slow=slow->next;
                fast=fast->next->next;
            }
            fast=slow;
            slow=slow->next;
            fast->next=NULL;
            ListNode* left=sortList(head);
            ListNode* right=sortList(slow);
            return merge(left,right);
        }
    }
    ListNode* merge(ListNode* left,ListNode* right){
        ListNode* head=new ListNode(-1);
        ListNode* ptr=head;
        while(left!=NULL&&right!=NULL){
            if(left->val<right->val){
                head->next=left;
                left=left->next;
            }else{
                head->next=right;
                right=right->next;
            }
            head=head->next;
        }
        if(left) head->next=left;
        if(right) head->next=right;
        return ptr->next;
    }
};
