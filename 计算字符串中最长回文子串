#include <iostream>
#include <string>
#include <stack>
#include <vector>
#include <deque>
using namespace std;


/*
针对求解最长回文子串，我们分别尝试了5种方法进行求解：
1）暴力算法，时间复杂度非常高；
2）分类暴力算法，分别针对奇数和偶数进行分析；
3）分类暴力算法优化，通过构建新的字符串避免进行奇偶分析；
4）动态规划法则进行求解，通过回文淄川的子类一定是回文子串，利用动态规划算法进行求解；
5）利用最常间的Manacher算法进行求解
*/
int longest_ror_String(string s,vector<char>& v){
	int len = s.length();
	int count, max = 0;
	bool flag = false;
	vector<char> vec_temp;
	for (int i = 0; i < len; i++){
		int ki = i;
		count = 0;
		for (int j = len - 1; j > i; j--){
			int kj = j;
			vector<char> vec;
			while (s[ki] == s[kj]){
				count++;
				vec.push_back(s[ki]);
				if (ki == kj || ki + 1 == kj)
				{	
					if (ki == kj){
						count = (count - 1) * 2 + 1;
					}
					else{
						count = count * 2;
					}
					flag = true;
					vec_temp = vec;
					break;
				}
				ki++;
				kj--;
			}
			if (flag == true) break;
		}
		if (max < count) {
			v = vec_temp;
			max = count;
		}
	}
	cout << max << endl;
	return max;
}
string longestPalindrome(string s){
	int max1 = 0;//奇数最长子串
	int max2 = 0;//偶数最长子串
	int idx1 = 0;//奇数最长子串的中心字符
	int idx2 = 0;//偶数最长子串的中心字符
	string result;
	//计算奇数最长回文字符串
	for (int i = 0; i < s.length(); i++){
		int j = i;
		int z = i;
		int count1 = 0;
		int count2 = 0;
		while ((++z < s.length() && (--j >= 0) && s[z] == s[j])){
			count1 += 2;
			if (count1>max1){
				max1 = count1;
				idx1 = i;
			}
		}

		//计算偶数最长回文字符串
		j = i;
		z = i + 1;
		while ((z < s.length()) && (j >= 0) && (s[z] == s[j])){
			count2 += 2;
			if (count2>max2){
				max2 = count2;
				idx2 = i;
			}
			z++;
			j--;
		}
	}
	if (max1 + 1 > max2) result = s.substr(idx1 - max1 / 2, max1 + 1);
	else result = s.substr(idx2 - max2 / 2 + 1, max2);
	return result;
}
//通过改造字符串使得程序不用区分奇偶了
//aba改造为#a#b#a#,abba改造为#a#b#b#a#，即处理的都是奇数啦！
string longestPalindrome_better(string s){
	int max = 0;
	int idx = 0;
	string temp[2005];
	int j = 0;
	for (int i = 0; i < s.size(); i++){
		temp[j++] = '#';
		temp[j++] = s[i];
	}
	temp[j++] = '#';
	temp[j] = '\0';
	for (int i = 0; i < 2 * s.size() + 1; i++){
		int j = i;
		int z = i;
		int count = 0;

		while ((++z) < (2 * s.size() + 1) && (--j >= 0) && (temp[z] == temp[j])){
			count++;
			if (count > max){
				max = count;
				idx = i;
			}
		}
	}
	return s.substr((idx - max) / 2, max);
}

string longestPalindrome_DP(string s){
	int len = s.length();
	int idx = 0;
	int max = 1;
	int map[1000][1000] = { 0 };
	//初始化奇数的回文子串
	for (int i = 0; i < len; i++){
		map[i][i] = 1;
	}
	//初始化偶数的回文子串
	for (int i = 0; i < len - 1; i++){
		if (s[i] == s[i + 1]){
			map[i][i + 1] = 1;
			idx = i;
			max = 2;
		}
	}
	for (int plen = 3; plen <= len; plen++){
		for (int j = 0; j < len - plen + 1; j++){
			int z = plen + j - 1;
			if (s[j] == s[z] && map[j + 1][z - 1]){
				map[j][z] = 1;
				idx = j;
				max = plen;
			}
		}
	}
	return s.substr(idx, max);
}
string longestPalindrome_Manacher(string s){
	string temp;
	temp += "$#";
	for (int i = 0; i < s.size(); i++){
		temp += s[i];
		temp += "#";
	}
	int *p = new int[temp.length()];
	memset(p, 0, sizeof(p));
	//max记录的是最长回文子串的长度，idx记录的是最长回文串的中心位置
	int max = 0, idx = 0;
	//mx记录i之前的最长回文子串延伸到最右边的位置，id记录该字符串的中心位置
	int mx = 0, id = 0;
	//因为第一个是'$'字符，所以不用计算它的p值
	for (int i = 1; i < temp.length(); i++){
		if (mx > i){
			p[i] = (p[2 * id - i] < (mx - i) ? p[2 * id - 1] : (mx - id));
		}
		else{
			p[i] = 1;
		}
		while (i + p[i] < temp.length() && temp[i - p[i]] == temp[i + p[i]]){
			p[i]++;
		}
		if (i + p[i] > mx){
			id = i;
			mx = i + p[i];
			if (p[i] > max){
				max = p[i];
				idx = id;
			}
		}
	}
	max--;
	delete p;
	return s.substr((idx - max) / 2, max);

}
int main(){
	string s = "asdfjafhellololleh";
	string s1 = "level";
	vector<char> vec;
	string s2 = longestPalindrome(s);
	cout << s2 << endl;
	string s3=longestPalindrome_DP(s);
	cout << s3 << endl;
	string s4 = longestPalindrome_Manacher(s);
	cout << s4 << endl;
	return 0;
}
