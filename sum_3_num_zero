#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

vector<vector<int>> getIndVec_input_distinct(vector<int>& nums){
	vector<vector<int>> vecresult;
	//注意这里的sort算法是去重的关键
	sort(nums.begin(), nums.end());
	int len = nums.size();
	if (len < 3) return vecresult;
	for (int i = 0; i < nums.size();){
		//这里直接当nums[i]>0之后直接返回的原因是因为排序之后如果nums[i]>0则不可能在后面找到负值使得其值和为0
		if (nums[i]>0) return vecresult;
		for (int j = i + 1; j < nums.size();){
			int temp = 0 - nums[i] - nums[j];
			vector<int>::iterator iter =
				find(nums.begin() + j + 1, nums.end(), temp);
			if (iter != nums.end()){
				vector<int> tempres;
				tempres.push_back(nums[i]);
				tempres.push_back(nums[j]);
				tempres.push_back(*iter);
				vecresult.push_back(tempres);
			}
			j++;
			while (j < nums.size() && nums[j] == nums[j - 1]) ++j;
		}
		i++;
		while (i < nums.size() && nums[i] == nums[i - 1]) ++i;
	}
	return vecresult;
}

vector<vector<int>> getIndVec_result_distinct(vector<int>& nums){
	vector<vector<int>> vecresult;
	sort(nums.begin(), nums.end());
	int len = nums.size();
	if (len < 3) return vecresult;
	for (int i = 0; i < nums.size(); i++){
		if (nums[i]>0) return vecresult;
		for (int j = i + 1; j < nums.size(); j++){
			int temp = 0 - nums[i] - nums[j];
			vector<int>::iterator iter =
				find(nums.begin() + j + 1, nums.end(), temp);
			if (iter != nums.end()){
				vector<int> tempres;
				tempres.push_back(nums[i]);
				tempres.push_back(nums[j]);
				tempres.push_back(*iter);
				if (vecresult.size() == 0){
					vecresult.push_back(tempres);
				}
				else{
					vector<vector<int>>::iterator it1 =
						find(vecresult.begin(), vecresult.end(), tempres
						);
					if (it1 == vecresult.end()){
						vecresult.push_back(tempres);
					}
				}

			}
		}
	}
	return vecresult;
}

int main(){
	vector<int> vec;
	//int a[] = { 2, 3, 2, -1, 0, -1 };
	int a[] = { 2, -1, 3, -1, 5, -1 };
	for (int i = 0; i < sizeof(a) / sizeof(a[0]); i++){
		vec.push_back(a[i]);
	}
	vector<vector<int>> v;
	v = getIndVec_result_distinct(vec);
	cout << v.size() << endl;
	vector<vector<int>>::iterator iter = v.begin();
	while (iter != v.end()){
		vector<int> temp = *iter;
		vector<int>::iterator iter1 = temp.begin();
		while (iter1 != temp.end()){
			cout << *iter1 << endl;
			++iter1;
		}
		++iter;
	}
	return 0;
}
